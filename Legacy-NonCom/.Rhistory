library(gptstudio)
Sys.setenv(OPENAI_API_KEY="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")
library(shiny)
library(tidyverse)
library(plotly)
library(DT)
#####Import Data
dat<-read_csv(url("https://www.dropbox.com/s/uhfstf6g36ghxwp/cces_sample_coursera.csv?raw=1"))
dat<- dat %>% select(c("pid7","ideo5","newsint","gender","educ","CC18_308a","region"))
dat<-drop_na(dat)
#####Make your app
ui <- navbarPage(
title="My Application",
tabPanel("Page 1",
sidebarPanel(
sliderInput(inputId="ideo_slider",
label="Select Five Point Ideology (1=Very liberal, 5=Very conservative)",
min=1,
max=5,
value=3)
),
mainPanel(
tabsetPanel( # This creates the panel to insert tabs
tabPanel("Tab1", plotOutput("party_histogram")), # This creates an individual tab
tabPanel("Tab2", plotOutput("trump_histogram"))
)
)
),
tabPanel("Page 2",
sidebarPanel(
checkboxGroupInput(inputId = "gender_checkbox",
label = "Select Gender",
choices = c(1, 2),
selected = NULL),
),
mainPanel(
plotlyOutput("pid7_educ_scatter")
)
),
tabPanel("Page 3",
sidebarPanel(
selectInput(inputId = "region_select",
label = "Select Region",
choices = c(1, 2, 3, 4),
selected = NULL,
multiple = TRUE)
),
mainPanel(
dataTableOutput("data_table")
)
)
)
server<-function(input,output){
output$party_histogram <- renderPlot({
dat_data <- filter(dat, ideo5 == input$ideo_slider)
ggplot(dat_data, aes(x = pid7)) +
geom_bar() +
xlim(c(0, 8)) +
labs(x = "7 Point Party ID, 1=Very D, 7=Very R", y = "Count") +
scale_y_continuous(breaks = c(0, 25, 50, 75, 100),
limits = c(0, 100))
})
output$trump_histogram <- renderPlot({
dat_data <- filter(dat, ideo5 == input$ideo_slider)
ggplot(dat_data, aes(x = CC18_308a)) +
geom_bar() +
xlim(c(0, 5)) +
labs(x = "Trump Support", y = "count")
})
output$pid7_educ_scatter <- renderPlotly({
dat_data <- filter(dat, gender %in% input$gender_checkbox)
ggplot(dat_data, aes(x = educ, y = pid7)) +
geom_jitter() +
geom_smooth(method = "lm", size = 1.5)
})
output$data_table <- renderDataTable({
filter(dat, region %in% input$region_select)
})
#####Hint: when you make the data table on page 3, you may need to adjust the height argument in the dataTableOutput function. Try a value of height=500
}
shinyApp(ui,server)
# On Page 1, is there a tabset with two tabs?
#   Yes
# On Page 1, does the input in the side panel substantially match the model?
#   Yes
# On Page 1, does Tab 1 substantially replicate the figure in the model?
#   Yes
# On Page 1, does Tab 2 substantially replicate the figure in the model?
#   Yes
# On Page 2,  does the input in the side panel substantially match the model?
#   Yes
# On Page 2, does the main panel substantially replicate the figure in the model?
#   Yes
# On Page 3, does the input in the side panel match the model?
#   Yes
# On Page 3, does the main panel substantially replicate the table in the model? (Hint: This is a data table)
#   Yes
gptstudio:::chat_gpt_addin()
library(devtools)
install.packages("openai")
devtools::install_github("irudnyts/openai")
install.packages("openai")
rD <- rsDriver(browser = "chrome",
chromever = "109.0.5414.25",
port = 4444L,
verbose = T)
library(rvest)
library(RSelenium)
library(XML)
library(httr)
library(rJava)
library(netstat)
rD <- rsDriver(browser = "chrome",
chromever = "109.0.5414.25",
port = 4444L,
verbose = T)
remDr <- rD[["client"]]
remDr$open()
remDr$open()
remDr$open()
# navigate to the website
remDr$navigate("https://databank.worldbank.org/source/world-development-indicators")
Sys.setenv(webdriver.chrome.driver = "C:/Program Files/chromedriver_win32/chromedriver.exe")
rD <- rsDriver(browser = "chrome",
chromever = "109.0.5414.25",
port = 4444L,
verbose = T)
remDr$open()
rD <- rsDriver(browser = "chrome",
chromever = "109.0.5414.74",
port = 4444L,
verbose = T)
remDr$open()
Sys.setenv(webdriver.chrome.driver = "C:/Program Files/chromedriver_win32/chromedriver.exe")
library(rvest)
library(RSelenium)
library(XML)
library(httr)
library(rJava)
library(netstat)
rD <- rsDriver(browser = "chrome",
chromever = "109.0.5414.74",
port = 4444L,
verbose = T)
remDr$open()
remDr <- rD[["client"]]
remDr$open()
log(.7, 2)
log(0.3, 2)
log(0.7, 2)
a_log <- log(0.3, 2)
b_log <- log(0.7, 2)
a <- 0.3
b <- 0.7
(a*a_log)
(a*a_log) + (b*b_log)
(a*a_log) + (b*b_log)
a_log
(1/0.3)
a <- 0.3
a_log <- log((1/0.3), 2)
a_log
log(0.3, 2)
b <- 0.7
b_log <- log(0.7, 2)
log(0.7, 2)
log(0.7, 2)
x1 <- 0.33333
x2 <- 0.33333
x3 <- 0.33333
x3*log(x3, 2)
x1*log(x1, 2)+x2*log(x2, 2)+x3*log(x3, 2)
x3*log(3, 2)
x1*log(3, 2)+x2*log(3, 2)+x3*log(3, 2)
log(3, 2)
log(1.5, 2)
Y*log(1.5, 2)
Y <- 0.66667
Y*log(1.5, 2)
X <- 0.33333
X*log(3, 2)
log(3, 2)
X*log(3, 2)+Y*log(1.5, 2)
`H(X|Y)` <- X*log(3, 2)+Y*log(1.5, 2)
(`H(X|Y)` <- X*log(3, 2)+Y*log(1.5, 2))
(`H(X)` <- x1*log(3, 2)+x2*log(3, 2)+x3*log(3, 2))
(`I(X;Y)` <- `H(X)`-`H(X|Y)`)
(`I(X;Y)` <- `H(X)`-`H(X|Y)`)
(PIG <- `I(X;Y)` / `H(X)`)
log(0.5,2)
log(2,2)
log(2.252252252252252,2)
log(1.798561151,2)
log(2.25,2)
log(1.79856,2)
1/6
0.1666667*log(0.1666667, 2) + 0.1666667*log(0.1666667, 2) + 0.1666667*log(0.1666667, 2) +
0.1666667*log(0.1666667, 2) + 0.1666667*log(0.1666667, 2) + 0.1666667*log(0.1666667, 2)
0.1666667*log(6, 2) + 0.1666667*log(6, 2) + 0.1666667*log(6, 2) + 0.1666667*log(6, 2) +
0.1666667*log(6, 2) + 0.1666667*log(6, 2) + 0.1666667*log(6, 2)
0.1666667*log(6, 2)
0.1666667*log(6, 2) + 0.1666667*log(6, 2) + 0.1666667*log(6, 2) + 0.1666667*log(6, 2) +
0.1666667*log(6, 2) + 0.1666667*log(6, 2)
x <- 5000 - 1001
log(x,2)
0.2*log(5,2) + 0.2*log(5,2) + 0.2*log(5,2) + 0.2*log(5,2) + 0.2*log(5,2)
0.2*log(5,2) + 0.4*log(2.5,2) + 0.4*log(2.5,2)
2.321928-1.521928
`P(A|B)` <- 0.5
`P(A|~B)` <- 0.4
`P(~B)` <- 0.7
`P(A)` <- 0.5*0.3+0.4*0.7
(`P(A)` <- 0.5*0.3+0.4*0.7)
(`P(~B│A)` <- (0.4*0.7)/`P(A)`)
(0.4*0.7)/`P(A)`)
(0.4*0.7)/`P(A)`
(`P(B│A)` <- (0.5*0.3)/`P(A)`)
(`P(A)` <- 0.167*0.5+0.333*0.5)
(`P(B│A)` <- (0.167*0.5)/`P(A)`)
library(shiny)
library(reticulate)
install.packages("reticulate")
library(shiny)
library(reticulate)
install.packages("RSelenium")
library(shiny)
library(reticulate)
# Define UI for application
shinyUI(fluidPage(
# Application title
titlePanel("Gamertag Generator"),
# Sidebar layout with a input and output definitions
sidebarLayout(
sidebarPanel(
textInput("string", "Enter a string:", ""),
actionButton("generate", "Generate")
),
# Show the generated combinations
mainPanel(
h4("Generated Combinations"),
verbatimTextOutput("combinations")
)
)
))
ui = shinyUI(fluidPage(
# Application title
titlePanel("Gamertag Generator"),
# Sidebar layout with a input and output definitions
sidebarLayout(
sidebarPanel(
textInput("string", "Enter a string:", ""),
actionButton("generate", "Generate")
),
# Show the generated combinations
mainPanel(
h4("Generated Combinations"),
verbatimTextOutput("combinations")
)
)
))
source_python("gt.py")
source_python("gt.py")
source_python("gt.py")
source_python("~/gt.py")
library(rsconnect)
rsconnect::setAccountInfo(name='d9n1ei-michael-mcgee', token='FC2560517F8746EA059B005BF3CCB986', secret='wUrIadaNNi/m65/v0gPXOek1s/8jMx01MJeVW0GU')
#
# CFTC Non Commercial Futures & Options Weekly Reporting
#
# Data is released every Friday from the prior Tuesday's close
library(shiny)
library(tidyverse)
library(gt) # Used for color conditioning tables
source("scripts/1_Leg_FAO_Import.R")
getwd()
cd("C:/Users/mmcge/OneDrive/Desktop/GitHub Port/CoT Report Viewer/Legacy - Non Commercial Futures and Options")
setwd("C:/Users/mmcge/OneDrive/Desktop/GitHub Port/CoT Report Viewer/Legacy - Non Commercial Futures and Options")
#
# CFTC Non Commercial Futures & Options Weekly Reporting
#
# Data is released every Friday from the prior Tuesday's close
library(shiny)
library(tidyverse)
library(gt) # Used for color conditioning tables
source("scripts/1_Leg_FAO_Import.R")
source("scripts/2_change_cftc_names.R")
source("scripts/3_filter_leg_fao.R")
source("scripts/4_functions.R")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Commitments of Traders"),
# Inputs at the top
fluidRow(
column(4,
selectInput(inputId = "market",
label = "Market",
choices = LegFaoTEST$Market_and_Exchange_Names,
selected = "E-MINI S&P 500"
)
),
column(4,
dateInput(inputId = "start",
label = "Start Date",
value = "2020-01-01",
min = "1995-03-21",
max = Sys.Date(),
startview = "year"
)
),
column(4,
dateInput(inputId = "end",
label = "End Date",
value = Sys.Date(),
min = "1995-03-21",
max = Sys.Date(),
startview = "year"
)
)
),
# Descriptive section for columns
fluidRow(
column(12,
wellPanel(
h4("Column Descriptions"),
p(HTML("<strong>Date:</strong> Data at Tuesday market close, released Friday.")),
p(HTML("<strong>OI All:</strong> Total open interest for all trader categories.")),
p(HTML("<strong>Z:</strong> Z-score for each column relative to target dates selected by input")),
p(HTML("<strong>Δ Week:</strong> Change from prior week.")),
p(HTML("<strong>Net:</strong> The difference between the total long and short positions.")),
p(HTML("<strong>Long/Short:</strong> Number of long and short positions respectively.")),
p(HTML("<strong>% Long/Short:</strong> Percentage of total open interest that is long or short.")),
p(HTML("<strong>Flip:</strong> Difference between the % Long and % Short columns. "))
)
)
),
# Main panel to display the table
fluidRow(
column(12,
gt_output(outputId = "gt_table")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$"gt_table" <- render_gt(cot_noncom(input$market, input$start, input$end)
)
}
# Run the application
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Commitments of Traders"),
# Inputs at the top
fluidRow(
column(4,
selectInput(inputId = "market",
label = "Market",
choices = LegFaoTEST$Market_and_Exchange_Names,
selected = "E-MINI S&P 500"
)
),
column(4,
dateInput(inputId = "start",
label = "Start Date",
value = "2020-01-01",
min = "1995-03-21",
max = Sys.Date(),
startview = "year"
)
),
column(4,
dateInput(inputId = "end",
label = "End Date",
value = Sys.Date(),
min = "1995-03-21",
max = Sys.Date(),
startview = "year"
)
)
),
# Descriptive section for columns
fluidRow(
column(12,
wellPanel(
h4("Column Descriptions"),
p(HTML("<strong>Date:</strong> Data at Tuesday market close, released Friday.")),
p(HTML("<strong>OI All:</strong> Total open interest for all trader categories.")),
p(HTML("<strong>Z:</strong> Z-score for each column relative to target dates selected by input")),
p(HTML("<strong>Δ Week:</strong> Change from prior week.")),
p(HTML("<strong>Net:</strong> The difference between the total long and short positions.")),
p(HTML("<strong>Long/Short:</strong> Number of long and short positions respectively.")),
p(HTML("<strong>% Long/Short:</strong> Percentage of total open interest that is long or short.")),
p(HTML("<strong>Flip:</strong> Difference between the % Long and % Short columns. "))
)
)
),
# Main panel to display the table
fluidRow(
column(12,
gt_output(outputId = "gt_table")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$"gt_table" <- render_gt(cot_noncom(input$market, input$start, input$end)
)
}
# Run the application
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
install.packages("quarto")
library(quarto)
shinyApp(ui = ui, server = server)
#
# CFTC Non Commercial Futures & Options Weekly Reporting
#
# Data is released every Friday from the prior Tuesday's close
# Setup
library(shiny)
source("scripts/1_Leg_FAO_Import.R")
source("scripts/2_change_cftc_names.R")
source("scripts/3_filter_leg_fao.R")
source("scripts/4_functions.R")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Commitments of Traders"),
# Inputs at the top
fluidRow(
column(4,
selectInput(inputId = "market",
label = "Market",
choices = LegFaoTEST$Market_and_Exchange_Names,
selected = "E-MINI S&P 500"
)
),
column(4,
dateInput(inputId = "start",
label = "Start Date",
value = "2020-01-01",
min = "1995-03-21",
max = Sys.Date(),
startview = "year"
)
),
column(4,
dateInput(inputId = "end",
label = "End Date",
value = Sys.Date(),
min = "1995-03-21",
max = Sys.Date(),
startview = "year"
)
)
),
# Descriptive section for columns
fluidRow(
column(12,
wellPanel(
h4("Column Descriptions"),
p(HTML("<strong>Date:</strong> Data at Tuesday market close, released Friday.")),
p(HTML("<strong>OI All:</strong> Total open interest for all trader categories.")),
p(HTML("<strong>Z:</strong> Z-score for each column relative to target dates selected by input")),
p(HTML("<strong>Δ Week:</strong> Change from prior week.")),
p(HTML("<strong>Net:</strong> The difference between the total long and short positions.")),
p(HTML("<strong>Long/Short:</strong> Number of long and short positions respectively.")),
p(HTML("<strong>% Long/Short:</strong> Percentage of total open interest that is long or short.")),
p(HTML("<strong>Flip:</strong> Difference between the % Long and % Short columns. "))
)
)
),
# Main panel to display the table
fluidRow(
column(12,
gt_output(outputId = "gt_table")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$"gt_table" <- render_gt(cot_noncom(input$market, input$start, input$end)
)
}
# Run the application
shinyApp(ui = ui, server = server)
getwd()
library(rsconnect)
+
deployApp()
deployApp(appDir = getwd(), appFile = "non_commercial_app.R", appPrimaryDoc = NULL)
deployApp(appDir = getwd(), appFile = "non_commercial_app.R", appPrimaryDoc = NULL, account = "d9n1ei-michael-mcgee")
?deployApp()
